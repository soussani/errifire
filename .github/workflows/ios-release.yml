name: iOS Release (App Store, no pods/npm)

on:
  workflow_dispatch: {}   # run manually

jobs:
  build:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # No Node setup, because node_modules are committed.
      # No CocoaPods install, because Pods/ are committed.

      - name: Set up Ruby & fastlane
        uses: ruby/setup-ruby@v1
        with: { ruby-version: '3.2' }
      - run: gem install fastlane

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      # Install signing cert & provisioning profile from your GitHub Secrets
      - name: Install signing
        shell: bash
        env:
          IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}      # .p12 (Apple Distribution) base64
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}  # .p12 password
          IOS_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}# App Store .mobileprovision base64
        run: |
          set -euo pipefail

          mkdir -p ~/certs
          echo "$IOS_CERT_BASE64" | base64 --decode > ~/certs/dist.p12
          echo "$IOS_PROFILE_BASE64" | base64 --decode > ~/certs/profile.mobileprovision

          # Create an unlocked throwaway keychain for codesigning
          KEYCHAIN=build.keychain
          KEYCHAIN_PWD=""
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"
          security set-keychain-settings "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"

          # Make sure our keychain is searched first (keep login/system too)
          security list-keychains -d user -s "$HOME/Library/Keychains/$KEYCHAIN" login.keychain-db /Library/Keychains/System.keychain
          security default-keychain -s "$HOME/Library/Keychains/$KEYCHAIN"

          # Import Distribution cert
          security import ~/certs/dist.p12 -k "$HOME/Library/Keychains/$KEYCHAIN" -P "$IOS_CERT_PASSWORD" -A
          # Allow Xcode / codesign to use the key silently
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PWD" "$HOME/Library/Keychains/$KEYCHAIN"

          # Install provisioning profile and extract its UUID and Team info
          PROFILE_PATH=~/certs/profile.mobileprovision
          PROFILE_PLIST=$(security cms -D -i "$PROFILE_PATH")
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$PROFILE_PLIST")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")
          APP_ID_PREFIX=$(/usr/libexec/PlistBuddy -c 'Print :ApplicationIdentifierPrefix:0' /dev/stdin <<< "$PROFILE_PLIST")
          GET_TASK_ALLOW=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:get-task-allow' /dev/stdin <<< "$PROFILE_PLIST" || echo "false")

          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
          echo "APP_ID_PREFIX=$APP_ID_PREFIX" >> $GITHUB_ENV
          echo "GET_TASK_ALLOW=$GET_TASK_ALLOW" >> $GITHUB_ENV

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

          echo "✅ Installed profile $PROFILE_UUID (team: $TEAM_ID, get-task-allow: $GET_TASK_ALLOW)"

      - name: Xcode archive (Manual signing with Distribution cert)
        env:
          DEV_TEAM: PJXU23AGYX               # <-- your team for this app
        run: |
          set -eo pipefail
          mkdir -p build

          echo "== List schemes =="
          xcodebuild -workspace ios/yallalala.xcworkspace -list

          echo "== Archive =="
          xcodebuild -workspace ios/yallalala.xcworkspace \
            -scheme yallalala \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/App.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=PJXU23AGYX \
            CODE_SIGN_IDENTITY="Apple Distribution" \   # ← add this
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            clean archive | tee build/archive.log


          echo "== Check archive path =="
          ls -lah build
          test -d build/App.xcarchive || { 
            echo "❌ Archive missing. Tail of archive.log:"; 
            tail -n 200 build/archive.log; 
            exit 1; 
          }

      - name: Export .ipa (App Store)
        env:
          YOUR_BUNDLE_ID: com.ardeco.errifire
          DEV_TEAM: PJXU23AGYX
        run: |
          set -e
          mkdir -p build/ipa
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>signingStyle</key><string>manual</string>
              <key>teamID</key><string>${DEV_TEAM}</string>
              <key>uploadSymbols</key><true/>
              <key>provisioningProfiles</key>
              <dict>
                <key>${YOUR_BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
              </dict>
            </dict>
          </plist>
          PLIST

          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ipa | tee build/export.log

          echo "== Export contents =="
          ls -lah build/ipa

          IPA_PATH=$(ls build/ipa/*.ipa | head -n 1 || true)
          if [ -z "$IPA_PATH" ]; then
            echo "❌ No .ipa produced. Showing last 200 lines of export log:"
            tail -n 200 build/export.log
            exit 1
          fi
          echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV

      - name: Upload .ipa directly to App Store
        run: |
          # If the repo has a Gemfile, use bundle exec; otherwise call fastlane directly.
          if [ -f Gemfile ]; then
            bundle install --path vendor/bundle
            bundle exec fastlane deliver \
              --ipa "$IPA_PATH" \
              --skip_screenshots \
              --skip_metadata \
              --force
          else
            fastlane deliver \
              --ipa "$IPA_PATH" \
              --skip_screenshots \
              --skip_metadata \
              --force
          fi
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
